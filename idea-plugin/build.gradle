/*
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.intellij'

apply from: rootProject.file('gradle/publish-jar.gradle')

intellij {
  pluginName = "palantir-java-format"
  updateSinceUntilBuild = true
  version = "191.5849.21"
}

patchPluginXml {
  pluginDescription = "Formats source code using the palantir-java-format tool. This version of " +
                      "the plugin uses version ${project.version} of the tool."
  version = project.version
  sinceBuild = '173'
  untilBuild = ''
}

publishPlugin {
  token = project.ext.properties.jetbrainsPluginRepoToken
}

dependencies {
  compile project(':palantir-java-format-api')
  runtimeOnly project(':palantir-java-format')
}

tasks.withType(JavaCompile).configureEach {
  options.errorprone.errorproneArgs += ['-Xep:StrictUnusedVariable:OFF']
}

check.dependsOn buildPlugin, verifyPlugin
// This task will resolve runtimeClasspath without telling Gradle that it depends on it, therefore dependent jars won't
// be created beforehand. Therefore, ensure that it knows about it.
// see https://github.com/JetBrains/gradle-intellij-plugin/blob/master/src/main/groovy/org/jetbrains/intellij/tasks/PrepareSandboxTask.groovy
tasks.withType(org.jetbrains.intellij.tasks.PrepareSandboxTask) {
    dependsOn configurations.runtimeClasspath
}

runIde.dependsOn buildPlugin

buildSearchableOptions.enabled = false

// Prevent nebula.maven-publish from trying to publish components.java - we are publishing our own different artifact
ext."nebulaPublish.maven.jar" = false

publishing {
    publications {
        nebula(MavenPublication) {
            artifact buildPlugin
        }
    }
}

versionsLock {
    disableJavaPluginDefaults()
}

// Javadoc fails if there are no public classes to javadoc, so make it stop complaining.
tasks.javadoc.failOnError = false