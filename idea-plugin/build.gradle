/*
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.intellij'

apply plugin: 'com.palantir.external-publish-jar'

def name = "palantir-java-format"
intellij {
    pluginName = name
    updateSinceUntilBuild = true
    version = "IU-202.6397.94"
    plugins = ['java']
}

tasks.runIde {
    // Allow debugging
    jvmArgs '--add-exports=java.base/jdk.internal.vm=ALL-UNNAMED'
}

patchPluginXml {
    pluginDescription = "Formats source code using the palantir-java-format tool."
    version = project.version
    sinceBuild = '182' // TODO: test against this version of IntelliJ to ensure no regressions
    untilBuild = ''
}

publishPlugin {
    token = System.env.JETBRAINS_PLUGIN_REPO_TOKEN
}
tasks.publishPlugin.onlyIf { versionDetails().isCleanTag }
tasks.publish.dependsOn publishPlugin

configurations {
    formatter {
        description = 'The default implementation of palantir-java-format, used if the user doesn\'t specify an explicit classpath.'
    }
}

dependencies {
    implementation project(':palantir-java-format-jdk-bootstrap')
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation('com.palantir.sls.versions:sls-versions') {
        // Has class version conflicts with slf4j brought in by Intellij
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    formatter project(':palantir-java-format')
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone.disable 'StrictUnusedVariable'
    // opt out of safe-logging checks which don't map correctly to idea plugins
    options.errorprone.disable 'PreferSafeLogger'
    options.errorprone.disable 'PreferSafeLoggableExceptions'
    options.errorprone.disable 'PreferSafeLoggingPreconditions'
}

check.dependsOn buildPlugin, verifyPlugin
// This task will resolve runtimeClasspath without telling Gradle that it depends on it, therefore dependent jars won't
// be created beforehand. Therefore, ensure that it knows about it.
// see https://github.com/JetBrains/gradle-intellij-plugin/blob/master/src/main/groovy/org/jetbrains/intellij/tasks/PrepareSandboxTask.groovy
tasks.withType(org.jetbrains.intellij.tasks.PrepareSandboxTask) {
    dependsOn configurations.runtimeClasspath

    // Also pack the formatter in its own directory
    into("${name}/impl") {
        // Note that we don't filter down the jars in the impl directory due to behavior when
        // the formatter is bootstrapped with jdk16+ exports.
        from configurations.formatter
    }
}

runIde.dependsOn buildPlugin

buildSearchableOptions.enabled = false

// Prevent nebula.maven-publish from trying to publish components.java - we are publishing our own different artifact
ext."nebulaPublish.maven.jar" = false

publishing {
    publications {
        nebula(MavenPublication) {
            artifact buildPlugin
        }
    }
}

versionsLock {
    // 'org.jetbrains.intellij' creates a dependency on *IntelliJ*, which GCV cannot resolve
    disableJavaPluginDefaults()
}

// Javadoc fails if there are no public classes to javadoc, so make it stop complaining.
tasks.javadoc.failOnError = false
