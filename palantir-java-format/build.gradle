apply plugin: 'application'
apply from: rootProject.file('gradle/publish-jar.gradle')

mainClassName = 'com.palantir.javaformat.java.Main'

description = 'Palantir Java Format'

dependencies {
    api project(':palantir-java-format-spi')
    api 'com.google.guava:guava'
    implementation 'com.google.errorprone:javac-shaded'
    implementation 'org.functionaljava:functionaljava'
    implementation 'com.fasterxml.jackson.core:jackson-databind' // purely for the debugger
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'

    testCompile 'com.google.guava:guava-testlib'
    testCompile 'com.google.truth:truth'
    testCompile 'com.google.testing.compile:compile-testing'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport'
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly 'com.google.auto.service:auto-service'
    annotationProcessor 'com.google.auto.service:auto-service'
    compileOnly "org.immutables:value::annotations"
    annotationProcessor "org.immutables:value"

    compileOnly 'org.derive4j:derive4j-annotation'
    annotationProcessor 'org.derive4j:derive4j'
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone.disable 'StrictUnusedVariable'
}

// false positives due to org.junit.runners.* in the test cases
tasks.checkJUnitDependencies.enabled = false

tasks.test {
    // Run all classes and tests in parallel
    // https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
}
