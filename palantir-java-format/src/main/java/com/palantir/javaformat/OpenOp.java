/*
 * Copyright 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.palantir.javaformat;

import com.google.common.base.Preconditions;
import com.palantir.javaformat.doc.Doc;
import com.palantir.javaformat.doc.DocBuilder;
import com.palantir.javaformat.doc.Level;
import java.util.Optional;
import org.immutables.value.Value;
import org.immutables.value.Value.Check;
import org.immutables.value.Value.Default;

/**
 * An {@code OpenOp} opens a level. It is an {@link Op} in the sequence of {@link Op}s generated by {@link OpsBuilder}.
 * When the sequence is turned into a {@link Doc} by {@link DocBuilder}, {@link Input.Tok}s delimited by {@code
 * OpenOp}-{@link CloseOp} pairs turn into nested {@link Level}s.
 */
@Value.Immutable
public abstract class OpenOp implements Op {
    public abstract Indent plusIndent();

    @Default
    public BreakBehaviour breakBehaviour() {
        return BreakBehaviour.BREAK_THIS_LEVEL;
    }

    @Default
    public Breakability breakabilityIfLastLevel() {
        return Breakability.NO_PREFERENCE;
    }

    /**
     * Whether to keep this level's {@link #plusIndent()} when the level's breaks are not taken.
     *
     * <p>A helpful default is provided when this field is applicable.
     */
    @Default
    public Optional<Boolean> keepIndentWhenInlined() {
        if (canUseKeepIndentWhenInlined()) {
            return Optional.of(true);
        }
        return Optional.empty();
    }

    public abstract Optional<String> name();

    @Check
    protected void check() {
        Preconditions.checkState(
                keepIndentWhenInlined().isPresent() == canUseKeepIndentWhenInlined(),
                "keepIndentWhenInlined is meaningless for this breakBehaviour / breakabilityIfLastLevel: %s",
                this);
    }

    /** Whether it's allowed to set {@link #keepIndentWhenInlined()}. */
    private boolean canUseKeepIndentWhenInlined() {
        return breakBehaviour() == BreakBehaviour.BREAK_ONLY_IF_INNER_LEVELS_THEN_FIT_ON_ONE_LINE
                || breakabilityIfLastLevel() == Breakability.CHECK_INNER;
    }

    /**
     * Make an ordinary {@code OpenOp}.
     *
     * @see #make(Indent, BreakBehaviour, Breakability)
     */
    public static Op make(Indent plusIndent) {
        return builder().plusIndent(plusIndent).build();
    }

    /**
     * Make an ordinary {@code OpenOp}.
     *
     * @param plusIndent the indent for breaks at this level
     * @param breakBehaviour how to decide whether to break this level or not
     * @return the {@code OpenOp}
     */
    public static Op make(Indent plusIndent, BreakBehaviour breakBehaviour, Breakability breakabilityIfLastLevel) {
        return builder()
                .plusIndent(plusIndent)
                .breakBehaviour(breakBehaviour)
                .breakabilityIfLastLevel(breakabilityIfLastLevel)
                .build();
    }

    @Override
    public void add(DocBuilder builder) {
        builder.open(plusIndent(), breakBehaviour(), breakabilityIfLastLevel(), keepIndentWhenInlined(), name());
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends ImmutableOpenOp.Builder {
        public Builder keepIndentWhenInlined(boolean value) {
            keepIndentWhenInlined(Optional.of(value));
            return this;
        }
    }
}
