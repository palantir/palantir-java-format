/*
 * Copyright 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.palantir.javaformat;

import com.palantir.javaformat.doc.Doc;
import com.palantir.javaformat.doc.DocBuilder;
import com.palantir.javaformat.doc.Level;
import java.util.Optional;
import java.util.OptionalInt;
import org.immutables.value.Value;
import org.immutables.value.Value.Default;

/**
 * An {@code OpenOp} opens a level. It is an {@link Op} in the sequence of {@link Op}s generated by {@link OpsBuilder}.
 * When the sequence is turned into a {@link Doc} by {@link DocBuilder}, {@link Input.Tok}s delimited by {@code
 * OpenOp}-{@link CloseOp} pairs turn into nested {@link Level}s.
 */
@Value.Immutable
public abstract class OpenOp implements Op {
    /** The extra indent inside this level. */
    public abstract Indent plusIndent();

    /**
     * When this level doesn't fit on one line, controls whether this level is to be broken (its breaks taken) or
     * partially inlined onto the current line.
     */
    @Default
    public BreakBehaviour breakBehaviour() {
        return BreakBehaviours.breakThisLevel();
    }

    /** If it's the last level of its parent, when to inline this level rather than break the parent. */
    @Default
    public LastLevelBreakability breakabilityIfLastLevel() {
        return LastLevelBreakability.ABORT;
    }

    public abstract Optional<String> debugName();

    /** Custom max column limit that contents of this level <em>before the last break</em> may not exceed. */
    public abstract OptionalInt columnLimitBeforeLastBreak();

    /**
     * Make an ordinary {@code OpenOp}.
     *
     * @see #make(Indent, BreakBehaviour, LastLevelBreakability)
     */
    public static Op make(Indent plusIndent) {
        return builder().plusIndent(plusIndent).build();
    }

    /**
     * Make an ordinary {@code OpenOp}.
     *
     * @param plusIndent the indent for breaks at this level
     * @param breakBehaviour how to decide whether to break this level or not
     * @return the {@code OpenOp}
     */
    public static Op make(
            Indent plusIndent, BreakBehaviour breakBehaviour, LastLevelBreakability breakabilityIfLastLevel) {
        return builder()
                .plusIndent(plusIndent)
                .breakBehaviour(breakBehaviour)
                .breakabilityIfLastLevel(breakabilityIfLastLevel)
                .build();
    }

    @Override
    public void add(DocBuilder builder) {
        builder.open(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends ImmutableOpenOp.Builder {}
}
