buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.11.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.17.0'
        classpath 'com.palantir.gradle.revapi:gradle-revapi:1.6.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.77.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.6.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.13.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.9.0'
    }
}

plugins {
    id "org.jetbrains.intellij" version "1.3.0" apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version "1.1.1"
}

apply plugin: 'com.palantir.external-publish'
apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.consistent-versions'

version System.env.CIRCLE_TAG ?: gitVersion()

allprojects {
    apply plugin: 'com.palantir.java-format'
    group = 'com.palantir.javaformat'
    version = rootProject.version

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'

    sourceCompatibility = 11
    targetCompatibility = 11

    tasks.withType(Checkstyle) {
        enabled = false
    }

    tasks.withType(JavaCompile) {
        options.errorprone.disable 'PreconditionsConstantMessage', 'PreferSafeLoggableExceptions', 'PreferSafeLoggingPreconditions'
    }

    // Run `./gradlew test -Drecreate=true` to recreate all the expected
    // generated code that we have checked into the repo.
    tasks.withType(Test) {
        systemProperty 'recreate', System.getProperty('recreate', 'false')
    }
}

/**
 * There is a bunch of truly snowflaky stuff going on this project, because we have this Java14InputAstVisitor class
 * which needs to implement some interface methods defined in com.sun.source.util.TreePathScanner, which varies
 * depending on what JVM the formatter is running on!
 */
idea.project.ipr.withXml { xml ->
    /**
     * Even though the p-j-f codebase has sourceCompat=11 and targetCompat=11, we have to convince IntelliJ to let us
     * compile against methods from a newer JVM like visitYield, visitSwitchExpression etc. Hence why we turn off the
     * --release flag (using USE_RELEASE_OPTION below)
     */
    def compilerConfiguration = xml.asNode().component.find({ it.'@name' == 'CompilerConfiguration' })
    compilerConfiguration.value().add(new XmlParser().parseText('<option name="USE_RELEASE_OPTION" value="false" />'))
    def module = compilerConfiguration.bytecodeTargetLevel.module.find({ it.'@name' == 'palantir-java-format' })
    // Module is null on jdk11
    if (module != null) {
        module.attributes().target = "14"
    }

    xml.asNode().value().add(new XmlParser().parseText('''
    <component name="JavacSettings">
        <option name="PREFER_TARGET_JDK_COMPILER" value="false" />
        <option name="ADDITIONAL_OPTIONS_OVERRIDE">
        <module name="palantir-java-format" options="--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED" />
        </option>
    </component>
    '''))
}
