buildscript {
    repositories {
        maven { url "https://palantir.bintray.com/releases" }
        jcenter()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:1.0.1'
        classpath 'com.palantir.gradle.revapi:gradle-revapi:1.4.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:17.3.2'
        classpath 'com.netflix.nebula:gradle-info-plugin:9.1.1'
        classpath 'com.palantir.baseline:gradle-baseline-java:3.50.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.3.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.12.3'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:1.27.0'
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.4.13" apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version "0.9"
}

apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.consistent-versions'

version System.env.CIRCLE_TAG ?: gitVersion()

allprojects {
    apply plugin: 'com.palantir.java-format'
    group = 'com.palantir.javaformat'
    version = rootProject.version

    repositories {
        jcenter()
        maven { url 'https://dl.bintray.com/palantir/releases/' }
        gradlePluginPortal()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'

    sourceCompatibility = 11
    targetCompatibility = 11

    // if (JavaVersion.current() >= JavaVersion.VERSION_14) {
    //     sourceCompatibility = 14
    //     targetCompatibility = 14
    // }

    tasks.withType(Checkstyle) {
        enabled = false
    }

    tasks.withType(JavaCompile) {
        options.errorprone.disable 'PreconditionsConstantMessage', 'PreferSafeLoggableExceptions', 'PreferSafeLoggingPreconditions'
    }

    // Run `./gradlew test -Drecreate=true` to recreate all the expected
    // generated code that we have checked into the repo.
    tasks.withType(Test) {
        systemProperty 'recreate', System.getProperty('recreate', 'false')
    }

    idea {
        module.languageLevel = new org.gradle.plugins.ide.idea.model.IdeaLanguageLevel(14)
    }
}

idea.project.languageLevel = new org.gradle.plugins.ide.idea.model.IdeaLanguageLevel(14)

    // idea.project.settings {
    //     compiler {
    //         javac {
    //             // Tell idea about the exported internal javac apis
    //             moduleJavacAdditionalOptions = [
    //                     'palantir-java-format': '--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED ' +
    //                             '--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED ' +
    //                             '--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED ' +
    //                             '--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED ' +
    //                             '--add-exports jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED ' +
    //                             '--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED']
    //         }
    //     }
    // }

idea.project.ipr.withXml { xml ->
    xml.asNode().component.find({ it.'@name' == 'CompilerConfiguration' }).value().add(new XmlParser().parseText('<option name="USE_RELEASE_OPTION" value="false" />'))
    xml.asNode().value().add(new XmlParser().parseText('''
    <component name="JavacSettings">
        <option name="PREFER_TARGET_JDK_COMPILER" value="false" />
        <option name="ADDITIONAL_OPTIONS_OVERRIDE">
        <module name="palantir-java-format" options="--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED" />
        </option>
    </component>
    '''))
}
